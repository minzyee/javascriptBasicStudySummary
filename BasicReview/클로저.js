// 클로저는 함수안에 함수가 있는데,
// 안에 있는 함수변수가 필요한 값이 외부에 있으면, 가비지콜렉터가 다 지우지 않고 클로저공간을 만들어준다.
// 함수안에 함수가 있을때만 쓸 수 있다.


const myFunc = function () {
  // g = 10; 선언 키워드가 없으면 무조건 전역변수

  // let a = 1; <-- 이 공간은 클로저 공간이 되는 겁니다.
  // myFunc 함수가 종료된 순간 외부에서는 접근할 수 없게 됩니다.
  // 클로저 공간에 접근할 수 있는 함수가 클로저 함수에요. 클로저는 그냥 단순 테크닉이에요.
  // 외부에서 절대 접근 못하게 만드는 테크닉 ! 클래스에서는 프라이빗아란걸 통해서 만드는데, 함수에서는 클로저가 있어요
  let a = 1;
  let b = 2;

  const myFunc2 = function () { // myFunc2 이 함수는 클로저 함수가 되는 것이고
    let b = 5;
    let c = 6;

    a = a + b + c;
    console.log(a); // 12
  }

  return myFunc2; // return 키워드를 만나며 myFunc()는 사라진다.
}

// 함수가 리턴되면, 종료된다는 의미이고, 함수가 종료되면 가비지컬렉터로 가서 데이터가 지워진다.
const innerFunc = myFunc();
innerFunc();

// myFunc 함수는 myfunc2 를 반환합니다.
// 이때 myFunc2 함수는 return 키워드를 만나서 종료됩니다. 그리고 안에 있는 프로퍼티들은 삭제 됩니다.